---
version: 2.1

orbs:
  op: twdps/onepassword@dev:latest

# =================================== global pipeline parameters

parameters:
  context:
    description: circleci context for all jobs
    type: string
    default: twdps-core-labs-team
  go-version:
    description: version for go-builder
    type: string
    default: 1.18.2

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-release: &on-tag-release
  branches:
    ignore: /.*/
  tags:
    only:
      - /^([0-9]+(\.[0-9]+)+)-rc.[0-9]+$/
      - /^((([0-9]+)\.([0-9]+)\.([0-9]+))?)$/

executors:
  go-builder:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>
    # shell: op run --env-file op.env -- /bin/bash

jobs:

  static-analysis:
    executor: go-builder
    steps:
      - checkout
      - setup_remote_docker
      - op/install-op:
          os: Ubuntu
      - run:
          name: static code analysis
          command: |
            go install honnef.co/go/tools/cmd/staticcheck@latest
            staticcheck ./...
      - run:
          name: lint
          command: |
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.46.2
            golangci-lint run ./...

  release:
    executor: go-builder
    steps:
      - checkout
      - setup_remote_docker
      - op/install-op:
          os: Ubuntu
      - run:
          name: Use goreleaser to build and publish executables to github packages
          environment:
            GORELEASER_CURRENT_TAG: $CIRCLE_TAG
          command: |
            curl -sL https://git.io/goreleaser | bash
            mkdir release-assets && cp dist/*.tar.gz release-assets && cp dist/*.zip release-assets
      - persist_to_workspace:
          root: ~/
          paths:
            - project/release-assets
      - run:
          name: fail to debug pipeline
          command: exit(1)

workflows:
  version: 2

  push-commits:
    jobs:
      - static-analysis

  release:
    jobs:
      - release:
          context: << pipeline.parameters.context >>
          name: publish (pre)release
          filters: *on-tag-release
      # - smoke-test-linux:
      #     requires:
      #       - publish pre-release
      #     filters: *on-tag-prerelease
      # - smoke-test-macos:
      #     requires:
      #       - publish pre-release
      #     filters: *on-tag-prerelease
      # - smoke-test-win:
      #     requires:
      #       - publish pre-release
      #     filters: *on-tag-prerelease
